var _user$project$D7$formatChildren = function (str) {
	return A2(
		_elm_lang$core$List$map,
		_elm_lang$core$String$trim,
		A2(_elm_lang$core$String$split, ',', str));
};
var _user$project$D7$formatName = function (str) {
	var _p0 = A2(_elm_lang$core$String$split, '(', str);
	if (_p0.ctor === '[]') {
		return _elm_lang$core$Native_Utils.crashCase(
			'D7',
			{
				start: {line: 91, column: 5},
				end: {line: 99, column: 26}
			},
			_p0)('Error, why empty?????!?!?!');
	} else {
		if (_p0._1.ctor === '[]') {
			return _elm_lang$core$Native_Utils.crashCase(
				'D7',
				{
					start: {line: 91, column: 5},
					end: {line: 99, column: 26}
				},
				_p0)('This shouldn\'t happn');
		} else {
			return _elm_lang$core$String$trim(_p0._0);
		}
	}
};
var _user$project$D7$splitChildren = function (list) {
	var process = function (elem) {
		var _p3 = A2(_elm_lang$core$String$split, '->', elem);
		if (_p3.ctor === '[]') {
			return _elm_lang$core$Native_Utils.crashCase(
				'D7',
				{
					start: {line: 59, column: 13},
					end: {line: 70, column: 52}
				},
				_p3)('Error, unable to parse empty List');
		} else {
			if (_p3._1.ctor === '[]') {
				return {ctor: '_Tuple2', _0: _p3._0, _1: _elm_lang$core$Maybe$Nothing};
			} else {
				if (_p3._1._1.ctor === '[]') {
					return {
						ctor: '_Tuple2',
						_0: _p3._0,
						_1: _elm_lang$core$Maybe$Just(_p3._1._0)
					};
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'D7',
						{
							start: {line: 59, column: 13},
							end: {line: 70, column: 52}
						},
						_p3)('I shouldn\'t exist');
				}
			}
		}
	};
	return A2(_elm_lang$core$List$map, process, list);
};
var _user$project$D7$matchParent = F2(
	function (list, elem) {
		var childrenCont = function (l) {
			return A2(
				_elm_lang$core$List$filter,
				function (x) {
					return A2(_elm_lang$core$List$member, elem.name, x.children);
				},
				l);
		};
		var _p6 = childrenCont(list);
		if (_p6.ctor === '[]') {
			return elem;
		} else {
			return _elm_lang$core$Native_Utils.update(
				elem,
				{
					parent: _elm_lang$core$Maybe$Just(_p6._0.name)
				});
		}
	});
var _user$project$D7$parentLess = function (list) {
	var _p7 = A2(
		_elm_lang$core$List$filter,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.parent, _elm_lang$core$Maybe$Nothing);
		},
		list);
	if (_p7.ctor === '[]') {
		return 'No parentless Node found';
	} else {
		if (_p7._1.ctor === '[]') {
			return A2(_elm_lang$core$Basics_ops['++'], 'The parentless Node was ', _p7._0.name);
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'Multiple parentless Nodes found: ',
				_elm_lang$core$String$concat(
					A2(
						_elm_lang$core$List$map,
						function (x) {
							return x.name;
						},
						_p7)));
		}
	}
};
var _user$project$D7$Node = F3(
	function (a, b, c) {
		return {parent: a, name: b, children: c};
	});
var _user$project$D7$formatNodeStrs = function (list) {
	var tupleParser = function (_p8) {
		var _p9 = _p8;
		var _p11 = _p9._0;
		var _p10 = _p9._1;
		if (_p10.ctor === 'Just') {
			return A3(
				_user$project$D7$Node,
				_elm_lang$core$Maybe$Nothing,
				_user$project$D7$formatName(_p11),
				_user$project$D7$formatChildren(_p10._0));
		} else {
			return A3(
				_user$project$D7$Node,
				_elm_lang$core$Maybe$Nothing,
				_user$project$D7$formatName(_p11),
				{ctor: '[]'});
		}
	};
	return A2(_elm_lang$core$List$map, tupleParser, list);
};
var _user$project$D7$main = _elm_lang$virtual_dom$Native_VirtualDom.staticProgram(
	_elm_lang$html$Html$text(
		_user$project$D7$parentLess(
			function (list) {
				return A2(
					_elm_lang$core$List$map,
					_user$project$D7$matchParent(list),
					list);
			}(
				_user$project$D7$formatNodeStrs(
					_user$project$D7$splitChildren(
						A2(
							_elm_lang$core$List$filter,
							function (x) {
								return !_elm_lang$core$String$isEmpty(x);
							},
							_elm_lang$core$String$lines(_user$project$Input$str))))))));
